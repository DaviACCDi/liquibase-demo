name: Feature Deploy

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Ambiente"
        required: true
        type: choice
        options: [dev, test]
      mode:
        description: "Ação"
        required: true
        type: choice
        options: [apply, plan-only]
        default: apply
      auto_merge:
        description: "Auto-merge PR -> main se DB OK"
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write

jobs:
  # ===================== DEV =====================
  deploy-dev:
    if: ${{ inputs.env == 'dev' }}
    name: Deploy (DEV / ${{ inputs.mode }})
    runs-on: ubuntu-latest
    environment: dev
    concurrency:
      group: feature-db-dev
      cancel-in-progress: false
    env:
      LB_DIR: liquibase
      JDBC_URL: ${{ secrets.JDBC_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Preflight (DEV)
        shell: bash
        run: |
          set -euo pipefail
          echo "Branch: $GITHUB_REF_NAME  | SHA: $GITHUB_SHA"
          test -n "${JDBC_URL:-}" || { echo "::error::[DEV] JDBC_URL ausente no Environment 'dev'"; exit 2; }
          chmod +x "$GITHUB_WORKSPACE/$LB_DIR/scripts/ci_deploy.sh" || true
          test -f "$GITHUB_WORKSPACE/$LB_DIR/conf/liquibase-dev.properties" || { echo "::error::liquibase-dev.properties ausente"; exit 2; }
          test -f "$GITHUB_WORKSPACE/$LB_DIR/changelogs/db.changelog-master.xml" || { echo "::error::master changelog ausente"; exit 2; }
          MASKED="$(echo "$JDBC_URL" | sed -E 's#//([^:@/]+):[^@/]+@#//\1:****@#; s#(//)[^:/]+(:[0-9]+)?/[^?]+#\1***:****/***#')"
          echo "JDBC_URL (mascarada): $MASKED"
          if echo "$JDBC_URL" | grep -Eqi '\.internal|RENDER_DEFAULT_DB'; then
            echo "::error::URL interna detectada. Use a EXTERNAL URL do Render (a mesma do DBeaver)."; exit 2
          fi

      - name: Definir TAG_PRE (para rollback exato)
        shell: bash
        run: |
          SAFE_BRANCH=$(echo "${GITHUB_REF_NAME}" | tr '/ ' '--')
          echo "TAG_PRE=feat-${SAFE_BRANCH}-${GITHUB_SHA}-pre" >> $GITHUB_ENV
          echo "TAG_PRE=$TAG_PRE"

      - name: Liquibase apply (DEV)
        if: inputs.mode == 'apply'
        env:
          TAG_PRE: ${{ env.TAG_PRE }}
        run: bash liquibase/scripts/ci_deploy.sh DEV

      - name: Liquibase plan-only (DEV)
        if: inputs.mode == 'plan-only'
        shell: bash
        run: |
          set -euo pipefail

          # ---- parse/converte postgresql:// -> jdbc:postgresql:// (sem credenciais na URL) ----
          parse_pg_url() {
            local RURL="$1"
            local REST="${RURL#postgres*://}"           # user:pass@host:port/db?query
            local CREDS="${REST%%@*}"                   # user:pass
            local HOSTPORT_DBQ="${REST#*@}"             # host:port/db?query
            local HOSTPORT="${HOSTPORT_DBQ%%/*}"        # host:port
            local DBQ="${HOSTPORT_DBQ#*/}"              # db?query

            DB_USER="${CREDS%%:*}"
            DB_PASS="${CREDS#*:}"
            DB_HOST="${HOSTPORT%%:*}"
            local PORT_PART="${HOSTPORT#*:}"
            [[ "$PORT_PART" != "$HOSTPORT" ]] && DB_PORT="$PORT_PART" || DB_PORT="5432"

            DB_NAME="${DBQ%%\?*}"
            DB_QUERY=""
            [[ "$DBQ" == *\?* ]] && DB_QUERY="${DBQ#*?}"
            # garante sslmode=require
            if [[ -z "$DB_QUERY" ]]; then
              DB_QUERY="sslmode=require"
            elif [[ ! "$DB_QUERY" =~ (^|&)sslmode= ]]; then
              DB_QUERY="${DB_QUERY}&sslmode=require"
            fi
            JDBC_URL_NOAUTH="jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}?${DB_QUERY}"
          }

          if [[ "$JDBC_URL" =~ ^postgres(ql)?:// ]]; then
            parse_pg_url "$JDBC_URL"
          else
            echo "::error::JDBC_URL não está no formato postgresql://"; exit 2
          fi

          echo "JDBC efetiva (masc.):  $(echo "$JDBC_URL_NOAUTH" | sed -E 's#(//)[^:/]+(:[0-9]+)?/[^?]+#\1***:****/***#')"

          PROPS="liquibase-dev.properties"

          docker run --rm --network host -w /workspace \
            -v "$GITHUB_WORKSPACE/$LB_DIR:/workspace" liquibase/liquibase \
            --defaultsFile="/workspace/conf/$PROPS" \
            --log-level=info \
            --url="$JDBC_URL_NOAUTH" \
            --username="$DB_USER" \
            --password="$DB_PASS" \
            validate

          docker run --rm --network host -w /workspace \
            -v "$GITHUB_WORKSPACE/$LB_DIR:/workspace" liquibase/liquibase \
            --defaultsFile="/workspace/conf/$PROPS" \
            --log-level=info \
            --url="$JDBC_URL_NOAUTH" \
            --username="$DB_USER" \
            --password="$DB_PASS" \
            updateSQL | tee "plan_DEV.sql"

      - name: Artefatos (plan DEV)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plan-DEV
          path: plan_DEV.sql
          if-no-files-found: ignore

      # ---- Auto-merge (sem actions de terceiros) ----
      - name: Encontrar PR aberto para main
        if: inputs.auto_merge == 'true'
        id: findpr
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const head  = `${owner}:${context.ref.replace('refs/heads/','')}`;
            const { data: prs } = await github.pulls.list({ owner, repo, state: 'open', head, base: 'main' });
            core.setOutput('number', prs.length ? prs[0].number : '');

      - name: Auto-merge PR (DEV)
        if: inputs.auto_merge == 'true' && steps.findpr.outputs.number != '' && success() && inputs.mode == 'apply'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const prNum = Number('${{ steps.findpr.outputs.number }}');
            const pr = (await github.pulls.get({ owner, repo, pull_number: prNum })).data;
            await github.pulls.merge({ owner, repo, pull_number: prNum, merge_method: 'squash', commit_title: pr.title });
            const branch = context.ref.replace('refs/heads/','');
            try { await github.git.deleteRef({ owner, repo, ref: `heads/${branch}` }); }
            catch (e) { core.warning(`Não foi possível apagar heads/${branch}: ${e.message}`); }

      - name: Comentar PR (falha + rollback) (DEV)
        if: inputs.auto_merge == 'true' && steps.findpr.outputs.number != '' && failure() && inputs.mode == 'apply'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const prNum = Number('${{ steps.findpr.outputs.number }}');
            const body  = `❌ Deploy de **DEV** falhou para \`${process.env.GITHUB_SHA}\`.\n` +
                          `Foi tentado **rollback até a tag \`${process.env.TAG_PRE || '(sem TAG_PRE)'}\`**.\n` +
                          `Veja os logs e ajuste o changeset antes de tentar novamente.`;
            await github.issues.createComment({ owner, repo, issue_number: prNum, body });

  # ===================== TEST =====================
  deploy-test:
    if: ${{ inputs.env == 'test' }}
    name: Deploy (TEST / ${{ inputs.mode }})
    runs-on: ubuntu-latest
    environment: test
    concurrency:
      group: feature-db-test
      cancel-in-progress: false
    env:
      LB_DIR: liquibase
      JDBC_URL: ${{ secrets.JDBC_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Preflight (TEST)
        shell: bash
        run: |
          set -euo pipefail
          echo "Branch: $GITHUB_REF_NAME  | SHA: $GITHUB_SHA"
          test -n "${JDBC_URL:-}" || { echo "::error::[TEST] JDBC_URL ausente no Environment 'test'"; exit 2; }
          chmod +x "$GITHUB_WORKSPACE/$LB_DIR/scripts/ci_deploy.sh" || true
          test -f "$GITHUB_WORKSPACE/$LB_DIR/conf/liquibase-test.properties" || { echo "::error::liquibase-test.properties ausente"; exit 2; }
          test -f "$GITHUB_WORKSPACE/$LB_DIR/changelogs/db.changelog-master.xml" || { echo "::error::master changelog ausente"; exit 2; }
          MASKED="$(echo "$JDBC_URL" | sed -E 's#//([^:@/]+):[^@/]+@#//\1:****@#; s#(//)[^:/]+(:[0-9]+)?/[^?]+#\1***:****/***#')"
          echo "JDBC_URL (mascarada): $MASKED"
          if echo "$JDBC_URL" | grep -Eqi '\.internal|RENDER_DEFAULT_DB'; then
            echo "::error::URL interna detectada. Use a EXTERNAL URL do Render (a mesma do DBeaver)."; exit 2
          fi

      - name: Definir TAG_PRE (para rollback exato)
        shell: bash
        run: |
          SAFE_BRANCH=$(echo "${GITHUB_REF_NAME}" | tr '/ ' '--')
          echo "TAG_PRE=feat-${SAFE_BRANCH}-${GITHUB_SHA}-pre" >> $GITHUB_ENV
          echo "TAG_PRE=$TAG_PRE"

      - name: Liquibase apply (TEST)
        if: inputs.mode == 'apply'
        env:
          TAG_PRE: ${{ env.TAG_PRE }}
        run: bash liquibase/scripts/ci_deploy.sh TEST

      - name: Liquibase plan-only (TEST)
        if: inputs.mode == 'plan-only'
        shell: bash
        run: |
          set -euo pipefail

          parse_pg_url() {
            local RURL="$1"
            local REST="${RURL#postgres*://}"
            local CREDS="${REST%%@*}"
            local HOSTPORT_DBQ="${REST#*@}"
            local HOSTPORT="${HOSTPORT_DBQ%%/*}"
            local DBQ="${HOSTPORT_DBQ#*/}"

            DB_USER="${CREDS%%:*}"
            DB_PASS="${CREDS#*:}"
            DB_HOST="${HOSTPORT%%:*}"
            local PORT_PART="${HOSTPORT#*:}"
            [[ "$PORT_PART" != "$HOSTPORT" ]] && DB_PORT="$PORT_PART" || DB_PORT="5432"

            DB_NAME="${DBQ%%\?*}"
            DB_QUERY=""
            [[ "$DBQ" == *\?* ]] && DB_QUERY="${DBQ#*?}"
            if [[ -z "$DB_QUERY" ]]; then
              DB_QUERY="sslmode=require"
            elif [[ ! "$DB_QUERY" =~ (^|&)sslmode= ]]; then
              DB_QUERY="${DB_QUERY}&sslmode=require"
            fi
            JDBC_URL_NOAUTH="jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}?${DB_QUERY}"
          }

          if [[ "$JDBC_URL" =~ ^postgres(ql)?:// ]]; then
            parse_pg_url "$JDBC_URL"
          else
            echo "::error::JDBC_URL não está no formato postgresql://"; exit 2
          fi

          echo "JDBC efetiva (masc.):  $(echo "$JDBC_URL_NOAUTH" | sed -E 's#(//)[^:/]+(:[0-9]+)?/[^?]+#\1***:****/***#')"

          PROPS="liquibase-test.properties"

          docker run --rm --network host -w /workspace \
            -v "$GITHUB_WORKSPACE/$LB_DIR:/workspace" liquibase/liquibase \
            --defaultsFile="/workspace/conf/$PROPS" \
            --log-level=info \
            --url="$JDBC_URL_NOAUTH" \
            --username="$DB_USER" \
            --password="$DB_PASS" \
            validate

          docker run --rm --network host -w /workspace \
            -v "$GITHUB_WORKSPACE/$LB_DIR:/workspace" liquibase/liquibase \
            --defaultsFile="/workspace/conf/$PROPS" \
            --log-level=info \
            --url="$JDBC_URL_NOAUTH" \
            --username="$DB_USER" \
            --password="$DB_PASS" \
            updateSQL | tee "plan_TEST.sql"

      - name: Artefatos (plan TEST)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plan-TEST
          path: plan_TEST.sql
          if-no-files-found: ignore

      # ---- Auto-merge (sem actions de terceiros) ----
      - name: Encontrar PR aberto para main
        if: inputs.auto_merge == 'true'
        id: findpr
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const head  = `${owner}:${context.ref.replace('refs/heads/','')}`;
            const { data: prs } = await github.pulls.list({ owner, repo, state: 'open', head, base: 'main' });
            core.setOutput('number', prs.length ? prs[0].number : '');

      - name: Auto-merge PR (TEST)
        if: inputs.auto_merge == 'true' && steps.findpr.outputs.number != '' && success() && inputs.mode == 'apply'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const prNum = Number('${{ steps.findpr.outputs.number }}');
            const pr = (await github.pulls.get({ owner, repo, pull_number: prNum })).data;
            await github.pulls.merge({ owner, repo, pull_number: prNum, merge_method: 'squash', commit_title: pr.title });
            const branch = context.ref.replace('refs/heads/','');
            try { await github.git.deleteRef({ owner, repo, ref: `heads/${branch}` }); }
            catch (e) { core.warning(`Não foi possível apagar heads/${branch}: ${e.message}`); }

      - name: Comentar PR (falha + rollback) (TEST)
        if: inputs.auto_merge == 'true' && steps.findpr.outputs.number != '' && failure() && inputs.mode == 'apply'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const prNum = Number('${{ steps.findpr.outputs.number }}');
            const body  = `❌ Deploy de **TEST** falhou para \`${process.env.GITHUB_SHA}\`.\n` +
                          `Foi tentado **rollback até a tag \`${process.env.TAG_PRE || '(sem TAG_PRE)'}\`**.\n` +
                          `Veja os logs e ajuste o changeset antes de tentar novamente.`;
            await github.issues.createComment({ owner, repo, issue_number: prNum, body });
