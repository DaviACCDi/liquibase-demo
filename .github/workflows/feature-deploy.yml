name: Feature Deploy

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment"
        required: true
        type: choice
        options: [dev, test]
      mode:
        description: "Action"
        required: true
        type: choice
        options: [apply, plan-only]
        default: apply

permissions:
  contents: read

jobs:
  # ===================== DEV =====================
  deploy-dev:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.env == 'dev' }}
    name: Deploy (DEV / ${{ inputs.mode }})
    runs-on: ubuntu-latest
    environment: dev
    concurrency:
      group: feature-db-dev
      cancel-in-progress: false
    env:
      LB_DIR: liquibase
      JDBC_URL: ${{ secrets.JDBC_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Preflight (DEV)
        shell: bash
        run: |
          set -euo pipefail
          echo "Branch: $GITHUB_REF_NAME  | SHA: $GITHUB_SHA"
          test -n "${JDBC_URL:-}" || { echo "::error::[DEV] JDBC_URL missing in Environment 'dev'"; exit 2; }
          chmod +x "$GITHUB_WORKSPACE/$LB_DIR/scripts/ci_deploy.sh" || true
          test -f "$GITHUB_WORKSPACE/$LB_DIR/conf/liquibase-dev.properties" || { echo "::error::liquibase-dev.properties missing"; exit 2; }
          test -f "$GITHUB_WORKSPACE/$LB_DIR/changelogs/db.changelog-master.yaml" || { echo "::error::master changelog missing"; exit 2; }
          MASKED="$(echo "$JDBC_URL" | sed -E 's#//([^:@/]+):[^@/]+@#//\1:****@#; s#(//)[^:/]+(:[0-9]+)?/[^?]+#\1***:****/***#')"
          echo "JDBC_URL (masked): $MASKED"

      - name: Define TAG_PRE (for rollback)
        shell: bash
        run: |
          SAFE_BRANCH=$(echo "${GITHUB_REF_NAME}" | tr '/ ' '--')
          echo "TAG_PRE=feat-${SAFE_BRANCH}-${GITHUB_SHA}-pre" >> $GITHUB_ENV
          echo "TAG_PRE=$TAG_PRE"

      - name: Liquibase apply (DEV)
        if: ${{ inputs.mode == 'apply' }}
        env:
          TAG_PRE: ${{ env.TAG_PRE }}
        run: bash liquibase/scripts/ci_deploy.sh DEV

      - name: Liquibase plan-only (DEV)
        if: ${{ inputs.mode == 'plan-only' }}
        env:
          MODE: plan
        run: bash liquibase/scripts/ci_deploy.sh DEV

      - name: Artifacts (plan DEV)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plan-DEV
          path: plan_DEV.sql
          if-no-files-found: ignore

  # ===================== TEST =====================
  deploy-test:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.env == 'test' }}
    name: Deploy (TEST / ${{ inputs.mode }})
    runs-on: ubuntu-latest
    environment: test
    concurrency:
      group: feature-db-test
      cancel-in-progress: false
    env:
      LB_DIR: liquibase
      JDBC_URL: ${{ secrets.JDBC_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Preflight (TEST)
        shell: bash
        run: |
          set -euo pipefail
          echo "Branch: $GITHUB_REF_NAME  | SHA: $GITHUB_SHA"
          test -n "${JDBC_URL:-}" || { echo "::error::[TEST] JDBC_URL missing in Environment 'test'"; exit 2; }
          chmod +x "$GITHUB_WORKSPACE/$LB_DIR/scripts/ci_deploy.sh" || true
          test -f "$GITHUB_WORKSPACE/$LB_DIR/conf/liquibase-test.properties" || { echo "::error::liquibase-test.properties missing"; exit 2; }
          test -f "$GITHUB_WORKSPACE/$LB_DIR/changelogs/db.changelog-master.yaml" || { echo "::error::master changelog missing"; exit 2; }
          MASKED="$(echo "$JDBC_URL" | sed -E 's#//([^:@/]+):[^@/]+@#//\1:****@#; s#(//)[^:/]+(:[0-9]+)?/[^?]+#\1***:****/***#')"
          echo "JDBC_URL (masked): $MASKED"

      - name: Define TAG_PRE (for rollback)
        shell: bash
        run: |
          SAFE_BRANCH=$(echo "${GITHUB_REF_NAME}" | tr '/ ' '--')
          echo "TAG_PRE=feat-${SAFE_BRANCH}-${GITHUB_SHA}-pre" >> $GITHUB_ENV
          echo "TAG_PRE=$TAG_PRE"

      - name: Liquibase apply (TEST)
        if: ${{ inputs.mode == 'apply' }}
        env:
          TAG_PRE: ${{ env.TAG_PRE }}
        run: bash liquibase/scripts/ci_deploy.sh TEST

      - name: Liquibase plan-only (TEST)
        if: ${{ inputs.mode == 'plan-only' }}
        env:
          MODE: plan
        run: bash liquibase/scripts/ci_deploy.sh TEST

      - name: Artifacts (plan TEST)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plan-TEST
          path: plan_TEST.sql
          if-no-files-found: ignore
