name: Main Deploy (dev → test → prod)

on:
  push:
    branches: [ "main" ]

jobs:
  dev-deploy:
    name: DEV Deploy
    runs-on: ubuntu-latest
    environment: dev
    concurrency: { group: db-dev, cancel-in-progress: false }
    env:
      LB_DIR: liquibase
      JDBC_URL: ${{ secrets.JDBC_URL }}
      TAG_PRE: main-${{ github.sha }}-pre

    steps:
      - uses: actions/checkout@v4
        with: { ref: ${{ github.sha }} }

      - name: Preflight (DEV)
        run: |
          echo "Ref: $GITHUB_SHA | Branch: $GITHUB_REF_NAME"
          test -n "${JDBC_URL:-}" || { echo "::error::[DEV] JDBC_URL não definido no Environment 'dev'"; exit 2; }
          test -x "$GITHUB_WORKSPACE/$LB_DIR/scripts/ci_deploy.sh" || chmod +x "$GITHUB_WORKSPACE/$LB_DIR/scripts/ci_deploy.sh"
          ls -la "$GITHUB_WORKSPACE/$LB_DIR" || true
          test -f "$GITHUB_WORKSPACE/$LB_DIR/conf/liquibase-dev.properties" || { echo "::error::liquibase-dev.properties ausente"; exit 2; }
          test -f "$GITHUB_WORKSPACE/$LB_DIR/changelogs/db.changelog-master.xml" || { echo "::error::master changelog ausente"; exit 2; }

      - name: Deploy DEV (com TAG_PRE)
        env: { TAG_PRE: ${{ env.TAG_PRE }} }
        run: bash liquibase/scripts/ci_deploy.sh DEV

      - name: Artefato (plan DEV)
        if: always()
        uses: actions/upload-artifact@v4
        with: { name: plan-DEV, path: plan_DEV.sql, if-no-files-found: ignore }

  test-deploy:
    name: TEST Deploy
    runs-on: ubuntu-latest
    needs: [dev-deploy]
    environment: test
    concurrency: { group: db-test, cancel-in-progress: false }
    env:
      LB_DIR: liquibase
      JDBC_URL: ${{ secrets.JDBC_URL }}
      TAG_PRE: main-${{ github.sha }}-pre

    steps:
      - uses: actions/checkout@v4
        with: { ref: ${{ github.sha }} }

      - name: Preflight (TEST)
        run: |
          test -n "${JDBC_URL:-}" || { echo "::error::[TEST] JDBC_URL não definido no Environment 'test'"; exit 2; }
          test -x "$GITHUB_WORKSPACE/$LB_DIR/scripts/ci_deploy.sh" || chmod +x "$GITHUB_WORKSPACE/$LB_DIR/scripts/ci_deploy.sh"
          test -f "$GITHUB_WORKSPACE/$LB_DIR/conf/liquibase-test.properties" || { echo "::error::liquibase-test.properties ausente"; exit 2; }
          test -f "$GITHUB_WORKSPACE/$LB_DIR/changelogs/db.changelog-master.xml" || { echo "::error::master changelog ausente"; exit 2; }

      - name: Deploy TEST (com TAG_PRE)
        env: { TAG_PRE: ${{ env.TAG_PRE }} }
        run: bash liquibase/scripts/ci_deploy.sh TEST

      - name: Artefato (plan TEST)
        if: always()
        uses: actions/upload-artifact@v4
        with: { name: plan-TEST, path: plan_TEST.sql, if-no-files-found: ignore }

  prod-deploy:
    name: PROD Deploy
    runs-on: ubuntu-latest
    needs: [test-deploy]
    environment: prod   # mantenha reviewers no Environment 'prod'
    concurrency: { group: db-prod, cancel-in-progress: false }
    env:
      LB_DIR: liquibase
      JDBC_URL: ${{ secrets.JDBC_URL }}
      TAG_PRE: main-${{ github.sha }}-pre

    steps:
      - uses: actions/checkout@v4
        with: { ref: ${{ github.sha }} }

      - name: Preflight (PROD)
        run: |
          test -n "${JDBC_URL:-}" || { echo "::error::[PROD] JDBC_URL não definido no Environment 'prod'"; exit 2; }
          test -x "$GITHUB_WORKSPACE/$LB_DIR/scripts/ci_deploy.sh" || chmod +x "$GITHUB_WORKSPACE/$LB_DIR/scripts/ci_deploy.sh"
          test -f "$GITHUB_WORKSPACE/$LB_DIR/conf/liquibase-prod.properties" || { echo "::error::liquibase-prod.properties ausente"; exit 2; }
          test -f "$GITHUB_WORKSPACE/$LB_DIR/changelogs/db.changelog-master.xml" || { echo "::error::master changelog ausente"; exit 2; }

      - name: Deploy PROD (com TAG_PRE)
        id: prod_run
        env: { TAG_PRE: ${{ env.TAG_PRE }} }
        run: bash liquibase/scripts/ci_deploy.sh PROD

      - name: Artefato (plan PROD)
        if: always()
        uses: actions/upload-artifact@v4
        with: { name: plan-PROD, path: plan_PROD.sql, if-no-files-found: ignore }

  rollback-test-if-prod-failed:
    name: Alinhar TEST (rollbackToTag) se PROD falhar
    runs-on: ubuntu-latest
    needs: [prod-deploy]
    if: needs.prod-deploy.result == 'failure'
    environment: test
    env:
      LB_DIR: liquibase
      JDBC_URL: ${{ secrets.JDBC_URL }}
      TAG_PRE: main-${{ github.sha }}-pre
    steps:
      - uses: actions/checkout@v4
        with: { ref: ${{ github.sha }} }

      - name: Rollback TEST até a TAG_PRE
        run: |
          docker run --rm --network host -w /workspace \
            -v "$GITHUB_WORKSPACE/$LB_DIR:/workspace" \
            liquibase/liquibase \
            --defaultsFile="/workspace/conf/liquibase-test.properties" \
            --url="$JDBC_URL" \
            rollbackToTag "$TAG_PRE" || true
