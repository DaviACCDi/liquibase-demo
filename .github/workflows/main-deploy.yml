name: Main Deploy (dev → test → prod)

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

env:
  LB_DIR: liquibase
  MODE: apply                      # força execução (sem plan-only)
  TAG_PRE: main-${{ github.sha }}-pre

jobs:
  dev-deploy:
    name: DEV Deploy
    runs-on: ubuntu-latest
    environment: dev
    concurrency:
      group: db-dev
    env:
      JDBC_URL: ${{ secrets.JDBC_URL_DEV || secrets.JDBC_URL }}

    steps:
      - uses: actions/checkout@v4

      - name: Preflight (DEV)
        run: |
          test -n "${JDBC_URL:-}" || { echo "::error::[DEV] JDBC_URL not defined"; exit 2; }
          chmod +x "$GITHUB_WORKSPACE/$LB_DIR/scripts/ci_deploy.sh"
          test -f "$LB_DIR/conf/liquibase-dev.properties" || { echo "::error::liquibase-dev.properties missing"; exit 2; }
          test -f "$LB_DIR/changelogs/db.changelog-master.yaml" || { echo "::error::master changelog missing"; exit 2; }

      - name: Deploy DEV
        env:
          TAG_PRE: ${{ env.TAG_PRE }}
        run: bash liquibase/scripts/ci_deploy.sh DEV

      - name: Artifact (plan DEV)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plan-DEV
          path: plan_DEV.sql
          if-no-files-found: ignore

  test-deploy:
    name: TEST Deploy
    runs-on: ubuntu-latest
    needs: [dev-deploy]
    environment: test
    concurrency:
      group: db-test
    env:
      JDBC_URL: ${{ secrets.JDBC_URL_TEST || secrets.JDBC_URL }}
      TAG_PRE: main-${{ github.sha }}-pre

    steps:
      - uses: actions/checkout@v4

      - name: Preflight (TEST)
        run: |
          test -n "${JDBC_URL:-}" || { echo "::error::[TEST] JDBC_URL not defined"; exit 2; }
          chmod +x "$GITHUB_WORKSPACE/$LB_DIR/scripts/ci_deploy.sh"
          test -f "$LB_DIR/conf/liquibase-test.properties" || { echo "::error::liquibase-test.properties missing"; exit 2; }
          test -f "$LB_DIR/changelogs/db.changelog-master.yaml" || { echo "::error::master changelog missing"; exit 2; }

      - name: Deploy TEST
        env:
          TAG_PRE: ${{ env.TAG_PRE }}
        run: bash liquibase/scripts/ci_deploy.sh TEST

      - name: Artifact (plan TEST)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plan-TEST
          path: plan_TEST.sql
          if-no-files-found: ignore

  prod-deploy:
    name: PROD Deploy
    runs-on: ubuntu-latest
    needs: [test-deploy]
    environment: prod             # remova approvals no Environment se quiser 100% automático
    concurrency:
      group: db-prod
    env:
      JDBC_URL: ${{ secrets.JDBC_URL_PROD || secrets.JDBC_URL }}
      TAG_PRE: main-${{ github.sha }}-pre

    steps:
      - uses: actions/checkout@v4

      - name: Preflight (PROD)
        run: |
          test -n "${JDBC_URL:-}" || { echo "::error::[PROD] JDBC_URL not defined"; exit 2; }
          chmod +x "$GITHUB_WORKSPACE/$LB_DIR/scripts/ci_deploy.sh"
          test -f "$LB_DIR/conf/liquibase-prod.properties" || { echo "::error::liquibase-prod.properties missing"; exit 2; }
          test -f "$LB_DIR/changelogs/db.changelog-master.yaml" || { echo "::error::master changelog missing"; exit 2; }

      - name: Deploy PROD
        env:
          TAG_PRE: ${{ env.TAG_PRE }}
        run: bash liquibase/scripts/ci_deploy.sh PROD

      - name: Artifact (plan PROD)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plan-PROD
          path: plan_PROD.sql
          if-no-files-found: ignore

  # Rollback automático do TEST se o PROD falhar
  rollback-test-if-prod-failed:
    name: Rollback TEST → TAG_PRE (caso PROD falhe)
    runs-on: ubuntu-latest
    needs: [prod-deploy]
    if: needs.prod-deploy.result == 'failure'
    environment: test
    concurrency:
      group: db-test
    env:
      JDBC_URL: ${{ secrets.JDBC_URL_TEST || secrets.JDBC_URL }}
      MODE: tag
      TAG_NAME: ${{ env.TAG_PRE }}

    steps:
      - uses: actions/checkout@v4

      - name: Rollback TEST to TAG_PRE
        run: |
          # usa seu script para emitir "liquibase tag" ou você pode rodar rollback direto.
          # Para rollback direto, prefira: liquibase rollback --tag "$TAG_NAME"
          docker run --rm --network host -w /workspace \
            -v "$GITHUB_WORKSPACE/$LB_DIR:/workspace" liquibase/liquibase \
            --defaultsFile="/workspace/conf/liquibase-test.properties" \
            --log-level=info \
            --url="${{ env.JDBC_URL }}" \
            rollback --tag "$TAG_NAME" || true
