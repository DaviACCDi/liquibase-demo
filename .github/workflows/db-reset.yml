name: DB Reset
run-name: "DB Reset – ${{ inputs.envs || 'manual' }}"

on:
  workflow_dispatch:
    inputs:
      envs:
        description: "Ambientes (dev,test,prod ou ALL)"
        required: true
        type: string
        default: "dev"
      confirm:
        description: "Confirmo que desejo RESETAR os bancos selecionados"
        required: true
        type: boolean
        default: false

permissions:
  contents: read

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      env_matrix: ${{ steps.mk.outputs.env_matrix }}
    steps:
      - id: mk
        shell: bash
        run: |
          set -euo pipefail
          IN="${{ inputs.envs }}"
          IN_UP=$(echo "$IN" | tr '[:lower:]' '[:upper:]' | tr -d ' ')
          if [[ "$IN_UP" == "ALL" ]]; then
            ARR='["dev","test","prod"]'
          else
            MAP=$(echo "$IN_UP" | tr ',' '\n' | tr '[:upper:]' '[:lower:]' | sed '/^$/d')
            for e in $MAP; do
              [[ "$e" =~ ^(dev|test|prod)$ ]] || { echo "::error::Ambiente inválido: $e"; exit 2; }
            done
            ARR=$(printf '[%s]\n' "$(echo "$MAP" | sed 's/^/"/; s/$/"/' | paste -sd, -)")
          fi
          echo "env_matrix=$ARR" >> "$GITHUB_OUTPUT"

  reset-db:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env: ${{ fromJSON(needs.prepare.outputs.env_matrix) }}
    name: "Reset ${{ matrix.env }}"
    environment: ${{ matrix.env }}
    concurrency:
      group: db-${{ matrix.env }}-reset
      cancel-in-progress: false
    env:
      LB_DIR: liquibase
      JDBC_URL: ${{ matrix.env == 'dev'  && (secrets.JDBC_URL_DEV  || secrets.JDBC_URL) ||
                   matrix.env == 'test' && (secrets.JDBC_URL_TEST || secrets.JDBC_URL) ||
                                          (secrets.JDBC_URL_PROD || secrets.JDBC_URL) }}
      ENV_ARG: ${{ matrix.env }}
      MODE: apply

    steps:
      - uses: actions/checkout@v4

      - name: Preflight (${{ matrix.env }})
        shell: bash
        run: |
          set -euo pipefail
          [[ "${{ inputs.confirm }}" == 'true' ]] || { echo "::error::Marque a confirmação para prosseguir"; exit 2; }
          chmod +x "$GITHUB_WORKSPACE/$LB_DIR/scripts/ci_deploy.sh" || true
          test -f "$GITHUB_WORKSPACE/$LB_DIR/conf/liquibase-${{ matrix.env }}.properties" \
            || { echo "::error::liquibase-${{ matrix.env }}.properties ausente"; exit 2; }
          test -f "$GITHUB_WORKSPACE/$LB_DIR/changelogs/db.changelog-master.yaml" \
            || { echo "::error::master changelog ausente"; exit 2; }

      - name: Run Liquibase Reset (${{ matrix.env }})
        env:
          TAG_PRE: reset-${{ matrix.env }}-${{ github.sha }}-pre
        run: |
          # Executa apenas o contexto 'reset'
          bash liquibase/scripts/ci_deploy.sh "${ENV_ARG^^}" --contexts=reset

      # Opcional: anexar o plan (útil pra auditoria)
      - name: Upload plan (${{ matrix.env }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plan-${{ matrix.env }}
          path: |
            plan_DEV.sql
            plan_TEST.sql
            plan_PROD.sql
          if-no-files-found: ignore
