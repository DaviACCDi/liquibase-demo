name: DB Reset
run-name: "DB Reset â€“ ${{ inputs.env || 'manual' }}"

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment to reset"
        required: true
        type: choice
        options: [dev, test]
      mode:
        description: "Action"
        required: true
        type: choice
        options: [apply, plan-only]
        default: plan-only
      confirm:
        description: "Type RESET to confirm"
        required: true
        type: string
        default: ""

permissions:
  contents: read

jobs:
  reset-db:
    name: Reset ${{ inputs.env }} (${{ inputs.mode }})
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    concurrency:
      group: db-${{ inputs.env }}-reset
      cancel-in-progress: false
    env:
      LB_DIR: liquibase
      JDBC_URL: ${{ secrets.JDBC_URL }}
      ENV_ARG: ${{ inputs.env }}
      LIQUIBASE_CONTEXTS: reset
      MODE: ${{ inputs.mode == 'plan-only' && 'plan' || 'apply' }}

    steps:
      - uses: actions/checkout@v4
      - name: Preflight
        shell: bash
        run: |
          set -euo pipefail
          test "${{ inputs.confirm }}" = "RESET" || { echo "::error::Type RESET to proceed"; exit 2; }
          chmod +x "$GITHUB_WORKSPACE/$LB_DIR/scripts/ci_deploy.sh" || true
          test -f "$GITHUB_WORKSPACE/$LB_DIR/conf/liquibase-${{ inputs.env }}.properties" || { echo "::error::props missing"; exit 2; }
          test -f "$GITHUB_WORKSPACE/$LB_DIR/changelogs/db.changelog-master.yaml" || { echo "::error::master missing"; exit 2; }
      - name: Run reset
        env:
          TAG_PRE: reset-${{ inputs.env }}-${{ github.sha }}-pre
        run: bash liquibase/scripts/ci_deploy.sh "${ENV_ARG^^}"
      - name: Upload plan
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plan-${{ inputs.env == 'dev' && 'DEV' || 'TEST' }}
          path: plan_${{ inputs.env == 'dev' && 'DEV' || 'TEST' }}.sql
          if-no-files-found: ignore
